var addedPlaceEvent = document.createEvent('Event');
addedPlaceEvent.initEvent('custom/addedPlace', true, true);

var latestPlace = {};
var places_form = document.getElementById('user_places_list');
var places_list = document.getElementById('added-places');
var addedPlaces = JSON.parse(places_form.value) || [];

// Register first state by taking into account app's data
registerState();

const provider = new window.GeoSearch.OpenStreetMapProvider();

function addPlaceButton() {
  var event = new CustomEvent('custom/addedPlace');
  window.dispatchEvent(event);
}

function popupTemplate(source, place, interests) {
  var full_address = place.address || place.label;
  var full_address_array = full_address.split(',');
  var name = full_address_array.splice(0, 1);
  var address = full_address_array.join();
  var popup = `<div class="popup-label"><div class="name">${name}</div>`;
  popup += interests != undefined ? `<span class="interests">${interests.join(', ')}</span>` : ``;
  popup += `<div class="address">${address}</div><button id="add-place" onclick="addPlaceButton()" type=button>Add</button></div>`;
  return popup
}

function PoiPopupTemplate(tags, id) {
  var popup = `<div class="popup-label"><div class="name"><a target="_blank" href="https://www.openstreetmap.org/node/${id}">${tags.name}</a></div>`;
  if (tags['address']) {
    popup += `<div class="address">${tags['address']}</div>`;
  }
  popup += `<button id="add-place" onclick="addPlaceButton()" type=button>Add</button></div>`;
  return popup
}

function popupCallback({query, result}) {
  var event = new CustomEvent('custom/openedPopup', { detail: result });
  window.dispatchEvent(event);
  return popupTemplate('osm', result);
}

const placeMarker = L.AwesomeMarkers.icon({
  icon: 'comments',
  markerColor: 'orange',
  prefix: 'fa'
});

const drinkMarker = L.AwesomeMarkers.icon({
  icon: 'beer',
  markerColor: 'purple',
  prefix: 'fa'
});

const cutleryMarker = L.AwesomeMarkers.icon({
  icon: 'cutlery',
  markerColor: 'red',
  prefix: 'fa'
});

const coffeeMarker = L.AwesomeMarkers.icon({
  icon: 'coffee',
  markerColor: 'blue',
  prefix: 'fa'
});

const searchControl = new window.GeoSearch.GeoSearchControl({
  provider: provider,
  showPopup: true,
  popupFormat: popupCallback,
  style: 'bar',
  maxMarkers: 5,
  marker: { icon: placeMarker  },
  keepResult: true
});

var mymap = L.map('mapid', {scrollWheelZoom: false}).setView([46.453, 3.318], 6);

mymap.on('focus', function() { mymap.scrollWheelZoom.enable(); });
mymap.on('blur', function() { mymap.scrollWheelZoom.disable(); });

L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>, POI via <a href="http://www.overpass-api.de/">Overpass API</a>',
    maxZoom: 18,
    id: 'mapbox.streets',
    accessToken: 'pk.eyJ1Ijoia2lsbGlhbmtlbXBzIiwiYSI6ImNpa2Zqcmp6dzAwMW91dGttMXZwaXVlOXoifQ.sM4Mivt3C4b8lPGKzNorxQ'
}).addTo(mymap);

mymap.addControl(searchControl);

function overPassLayerDisplay (data, markerIcon) {
  for (let i = 0; i < data.elements.length; i++) {
    let pos;
    let marker;
    const e = data.elements[i];

    // Don't display elements if they don't even have a name
    if (e.tags['name'] === undefined) {
      continue;
    }

    if (e.id in this._ids) {
      continue;
    }

    this._ids[e.id] = true;

    if (e.type === 'node') {
      pos = new L.LatLng(e.lat, e.lon);
    } else {
      pos = new L.LatLng(e.center.lat, e.center.lon);
    }

    marker = L.marker(pos, { icon: markerIcon });

    const popupContent = PoiPopupTemplate(e.tags, e.id);
    const popup = L.popup().setContent(popupContent);
    marker.bindPopup(popup);
    marker.on('popupopen', function(popup) {
      // Caution: According to MDN it is not supported on all browsers: https://developer.mozilla.org/en-US/docs/Web/API/Request
      // May need to be replaced by XMLHttpRequest later on.
      const addressRequest = new Request(`https://nominatim.openstreetmap.org/reverse?osm_type=N&osm_id=${e.id}&format=json&zoom=18`);
      fetch(addressRequest)
      .then(response => {
        if (response.status === 200) {
          return response.json();
        } else {
          throw new Error('Something went wrong on api server!');
        }
      })
      .then(response => {
        e.tags['address'] = response['display_name'];
        e.tags['osm_id'] = e['id'];
        e.tags['latitude'] = e['lat'];
        e.tags['longitude'] = e['lon'];
        // Update latest place to be ready to be added
        latestPlace = e.tags;
        // Update popup with address
        var popupContent = PoiPopupTemplate(e.tags, e.id);
        this._popup.setContent(popupContent);
        this._popup.update();
      }).catch(error => {
        console.error(error);
      });
    });

    this._markers.addLayer(marker);
  }
}

var pubsLayer = new L.OverPassLayer({
  'query': 'node({{bbox}})["amenity"="pub"];out;',
  onSuccess: function(data) {
    const displayBeer = overPassLayerDisplay.bind(this);
    displayBeer(data, cutleryMarker);
  }
});

var cafesLayer = new L.OverPassLayer({
  'query': 'node({{bbox}})["amenity"="cafe"];out;',
  onSuccess: function(data) {
    const displayCoffee = overPassLayerDisplay.bind(this);
    displayCoffee(data, coffeeMarker);
  }
});

var barsLayer = new L.OverPassLayer({
  'query': 'node({{bbox}})["amenity"="bar"];out;',
  onSuccess: function(data) {
    const displayDrink = overPassLayerDisplay.bind(this);
    displayDrink(data, drinkMarker);
  }
});

mymap.addLayer(cafesLayer);

overlayMaps = {
  "Cafes": cafesLayer,
  "Pubs": pubsLayer,
  "Bars": barsLayer
};

// Set overlayMaps as Base in order to be exclusive for performance issues.
L.control.layers(overlayMaps, null).addTo(mymap);

// Populate markers with already registered places
if (gon) {
  const places = gon.places;
  for (var i = 0; i < places.length; i++) {
    let place = places[i].place;
    let interests = places[i].interests;
    L.marker([place.latitude, place.longitude], { icon: placeMarker  }).addTo(mymap)
      .bindPopup(popupTemplate('app', place, interests))
      .on('popupopen', function(event) { latestPlace = place });
  }
}

function deletePlaceButton(index) {
  addedPlaces.splice(index, 1);
  registerState();
}

function registerState() {
  places_form.value = JSON.stringify(addedPlaces);
  places_list.innerHTML = '';
  for (var i = 0; i < addedPlaces.length; i++) {
    var new_place_label = document.createElement('li');
    // Wether from OpenStreetMap directly or from the app
    var full_address = addedPlaces[i].address || addedPlaces[i].label;
    full_address_array = full_address.split(',');
    name = full_address_array.splice(0, 1);
    address = full_address_array.join();

    new_place_label.innerHTML = `<span class="name">${name}</span> ${address}<button type=button onclick="deletePlaceButton(${i})">x</button>`;
    places_list.appendChild(new_place_label);
  }
}

window.addEventListener('custom/openedPopup', function (e) {
  latestPlace = e.detail;
}, false);

window.addEventListener('custom/addedPlace', function (e) {
  addedPlaces.push(latestPlace);
  registerState();
}, false);

// Allow to add interests directly to input
var interests_items = document.querySelector('#interests-list');
var interests_input = document.querySelector('#user_interests_list');

if (interests_input) {
  interests_items.addEventListener('click', function (e) {
    interests_input.value += interests_input.value == '' ? `${e.target.textContent}` : `, ${e.target.textContent}`;
  }, false);
}
